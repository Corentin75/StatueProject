#pragma kernel CSMain

RWTexture2D<float4> Result;
Texture2D<float4> _MainTex;
float4 _BrushColor;
float _BrushSize; // Taille du pinceau (en UV normalisé)
float2 _HitPosition; // Position du pinceau (en UV normalisé)
int2 _TextureSize;

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _TextureSize.x || id.y >= _TextureSize.y)
        return;

    // Convertir les indices en coordonnées UV (normalisées entre 0 et 1)
    float2 uv = id.xy / float2(_TextureSize.x, _TextureSize.y);

    // Inverser l'axe Y des coordonnées UV pour correspondre à Unity (Y=0 est en bas)
    uv.y = 1.0f - uv.y;

    // Calculer la distance entre la position du pinceau et le pixel actuel
    float distance = length(uv - _HitPosition);

    // Récupérer la couleur du pixel à la position (uv)
    float4 baseColor = _MainTex[id.xy];

    // Appliquer la couleur du pinceau seulement si la distance est inférieure à la taille du pinceau
    if (distance < _BrushSize)
    {
        // Mélanger la couleur du pinceau avec la couleur existante
        float4 newColor = lerp(baseColor, _BrushColor, _BrushColor.a); // Mélanger la couleur existante avec la couleur du pinceau
        Result[id.xy] = newColor;
    }
    else
    {
        // Conserver la couleur d'origine si le pixel est en dehors de la zone du pinceau
        Result[id.xy] = baseColor;
    }
}
